describe('Flux d\'Authentification Complet', () => {
  const phone = '0612345678';
  const password = 'TestPassword123';
  let otpCode = ''; // Pour stocker l'OTP lu depuis le terminal ou un mock

  // --- √âtape de Pr√©paration : R√©cup√©ration de l'OTP ---
  // Dans un vrai projet, on mockerait la r√©ponse du backend, 
  // mais pour simuler le flux manuel, nous allons supposer une m√©thode 
  // pour obtenir l'OTP (sinon, vous devrez le lire manuellement et le saisir).

  // üí° Note : Comme l'OTP est visible dans le terminal, 
  // ce test ne peut pas √™tre 100% automatique sans mocker le backend.
  // Nous allons donc nous concentrer sur les interactions IHM.

  beforeEach(() => {
    cy.visit('/connexion');
  });

  // ----------------------------------------------------------------------
  // TEST 1 : Inscription, V√©rification OTP et Redirection Onboarding
  // ----------------------------------------------------------------------
  it('Doit s\'inscrire, v√©rifier l\'OTP et √™tre redirig√© vers /onboarding', () => {
    // 1. Acc√®s √† l'inscription
    cy.get('a[routerLink="/inscription"]').click();
    cy.url().should('include', '/inscription');

    // 2. Soumission du formulaire d'inscription
    cy.get('input[formControlName="emailPhone"]').type(phone);
    cy.get('input[formControlName="password"]').type(password);
    cy.get('button[type="submit"]').click();

    // 3. Redirection vers la v√©rification OTP apr√®s succ√®s (hypoth√®se de la derni√®re √©tape)
    // üí° Ici, dans un vrai test E2E, on lirait l'OTP depuis le backend mock√©
    
    // 4. Redirection vers /onboarding apr√®s v√©rification (Manuelle pour l'OTP)
    // Pour l'automatisation E2E, nous allons simuler le succ√®s de la v√©rification 
    // et v√©rifier la redirection vers /onboarding.
    
    // Apr√®s un succ√®s d'inscription simul√© (nous nous contentons ici du click et de l'URL)
    cy.url().should('include', '/verify-otp'); 
    
    // 5. Simuler le remplissage de l'OTP (vous devrez le faire manuellement pour le moment)
    // cy.get('input[formControlName="otp"]').type('LE_CODE_LU_DANS_TERMINAL');
    // cy.get('button[type="submit"]').click();
    
    // Apr√®s v√©rification r√©ussie
    // cy.url().should('include', '/onboarding'); 
  });
  
  // ----------------------------------------------------------------------
  // TEST 2 : Connexion R√©ussie et D√©connexion
  // ----------------------------------------------------------------------
  it('Doit se connecter avec succ√®s et se d√©connecter', () => {
    // Pr√©condition: L'utilisateur doit exister et √™tre v√©rifi√© (fait manuellement ou par le test 1)
    
    // 1. Connexion
    cy.visit('/connexion');
    cy.get('input[formControlName="emailPhone"]').type(phone);
    cy.get('input[formControlName="password"]').type(password);
    cy.get('button[type="submit"]').click();

    // 2. V√©rification de la redirection vers le dashboard
    cy.url().should('include', '/dashboard');

    // 3. D√©connexion
    cy.get('#logout-button').click(); // Assurez-vous que votre bouton de d√©connexion a l'ID 'logout-button'

    // 4. V√©rification de la d√©connexion et de la redirection
    cy.url().should('include', '/connexion');
  });
  
  // ----------------------------------------------------------------------
  // TEST 3 : Acc√®s Prot√©g√©
  // ----------------------------------------------------------------------
  it('Doit bloquer l\'acc√®s au dashboard si non connect√©', () => {
    // Assurez-vous d'√™tre d√©connect√©
    localStorage.clear();
    
    // Tenter d'acc√©der au dashboard
    cy.visit('/dashboard');

    // V√©rification de la redirection forc√©e vers la page de connexion
    cy.url().should('include', '/connexion');
  });
});